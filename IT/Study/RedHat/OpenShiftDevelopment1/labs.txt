Chapter 2

Lab: Podman Basics
Use Podman to manage local containers.

Outcomes

You should be able to:

- Manage local containers.
- Copy files in and out of containers.
- Run a set of application containers that connect to one another via a Podman network.
- Forward a port from a container so that it is accessible from the host machine.

As the student user on the workstation machine, use the lab command to prepare your system for this exercise.

This command starts the basics-podman-secret local container, and copies the necessary files for this lab. The command also verifies that Podman is available and can pull from the required registries. You can find the source code for the basics-podman-secret container in the $HOME/DO188/solutions/basics-podman/secret-container directory.

The lab script continuously evaluates the objectives of this lab. Keep the script running in a terminal window, and complete the objectives of this lab from a new terminal window.

After each objective, return to the lab script evaluation to see if you have finished the objective successfully. When you have finished all of the objectives, the lab command prompts you to execute the finish function.

[student@workstation ~]$ lab start basics-podman
Instructions

The lab command starts the basics-podman-secret container, which contains the /etc/secret-file file.

Copy the /etc/secret-file file from the container to the $HOME/DO188/labs/basics-podman/solution file.

Start a new container with the following parameters:

Name: basics-podman-server

Image: registry.ocp4.example.com:8443/ubi8/httpd-24

Ports: Route traffic from port 8080 on your machine to port 8080 inside of the container

Network: lab-net

You can start the container in the detached mode for greater convenience.

Create the lab-net Podman network.

[student@workstation ~]$ podman network create lab-net
lab-net
The next objective of the lab script is passing.

Execute the podman run command to start the container.

[student@workstation basics-podman]$ podman run -d --name basics-podman-server \
--net lab-net -p 8080:8080 registry.ocp4.example.com:8443/ubi8/httpd-24
8b747...3616
Additional objectives of the lab script are passing.

Copy the $HOME/DO188/labs/basics-podman/index.html file to /var/www/html/ in the basics-podman-server container.

Verify that you are in the correct directory.

[student@workstation basics-podman]$ ls
index.html  solution
Copy the index.html file in to the container.

[student@workstation basics-podman]$ podman cp index.html \
basics-podman-server:/var/www/html/
In a web browser, navigate to localhost:8080 and verify that you see the Hello from Podman Basics lab text.

The next objective of the lab script is passing.

Start a new container with the following parameters:

Name: basics-podman-client

Image: registry.ocp4.example.com:8443/ubi8/httpd-24

Network: lab-net

You can start the container in the detached mode for greater convenience.

Execute the podman run command to start the container.

[student@workstation basics-podman]$ podman run -d --name basics-podman-client \
--net lab-net registry.ocp4.example.com:8443/ubi8/httpd-24
8b747...3616
Confirm that the basics-podman-client container can access the basics-podman-server container by its DNS name. Use the podman exec and curl commands to make a request to the basics-podman-server container at port 8080 from the basics-podman-client container.

Confirm that DNS is enabled on the lab-net network.

[student@workstation basics-podman]$ podman network inspect lab-net
...output omitted...
          "dns_enabled": true,
...output omitted...
Use the curl command inside of the basics-podman-client to confirm that the basics-podman-server container is accessible from the lab-net network by its DNS name.

[student@workstation basics-podman]$ podman exec basics-podman-client \
curl -s http://basics-podman-server:8080 && echo
<h1>Hello from Podman Basics lab</h1>
All remaining objectives are passing.

Finish

As the student user on the workstation machine, change to the student user home directory and use the lab command to complete this exercise. This is important to ensure that resources from previous exercises do not impact upcoming exercises.

Press y when the lab start command prompts you to execute the finish function. Alternatively, execute the following command:

[student@workstation ~]$ lab finish basics-podman

---
Chapter 3
Lab: Container Images
Use Podman to create and pull an image from a container registry.

Outcomes

You should be able to:
- Create a container image from a Containerfile by using Quay.
- Pull an image from the Quay container registry.
- Add a tag to a container image.

As the student user on the workstation machine, use the lab command to prepare your system for this exercise.

This command verifies that Podman is available and provides a Containerfile template.

The lab script continuously evaluates the objectives of this lab. Keep the script running in a terminal window and complete the objectives of this lab from a new terminal window.

After each objective, return to the lab script evaluation to see if you have finished the objective successfully. When you finish all objectives, the lab command prompts you to execute the finish function.

[student@workstation ~]$ lab start images-lab
Instructions

Build a container image that uses the ~/DO188/labs/images-lab/Containerfile file.

Call the resulting image images-lab and push the image into the registry.ocp4.example.com:8443 registry in the developer user repository.

Use the developer user with the developer password to authenticate with the registry.ocp4.example.com:8443 registry.

Authenticate Podman with the registry.ocp4.example.com:8443 registry.

[student@workstation ~]$ podman login -u developer -p developer \
 registry.ocp4.example.com:8443
Login Succeeded!
In a terminal, change into the ~/DO188/labs/images-lab directory.

[student@workstation ~]$ cd ~/DO188/labs/images-lab
no output expected
Build the Containerfile with the registry.ocp4.example.com:8443/developer/images-lab container image name.

[student@workstation images-lab]$ podman build --file Containerfile \
  --tag registry.ocp4.example.com:8443/developer/images-lab
...output omitted...
Successfully tagged registry.ocp4.example.com:8443/developer/images-lab:latest
8d14...dd5a
Push the image to the registry.ocp4.example.com:8443 registry.

[student@workstation images-lab]$ podman push \
  registry.ocp4.example.com:8443/developer/images-lab
...output omitted...
Writing manifest to image destination
Storing signatures
Add the grue tag to the images-lab container image, and push it to the registry.ocp4.example.com:8443 registry.

Add the grue tag to the image.

[student@workstation images-lab]$ podman tag \
  registry.ocp4.example.com:8443/developer/images-lab \
  registry.ocp4.example.com:8443/developer/images-lab:grue
no output expected
Push the new image tag.

[student@workstation images-lab]$ podman push \
  registry.ocp4.example.com:8443/developer/images-lab:grue
...output omitted...
Writing manifest to image destination
Storing signatures
Create a container by using the images-lab:grue image. Use the images-lab container name, and bind the 8080 container port to the 8080 host port. Start the container in the background.

Optionally, use the curl command to verify that the HTTP server is running.

Start the container.

[student@workstation images-lab]$ podman run -d --name images-lab \
-p 8080:8080 images-lab:grue
2422...e7b1
Connect to the HTTP server by using curl. Note that this step is not required to make the lab script pass.

[student@workstation images-lab]$ curl localhost:8080
It is pitch black. You are likely to be eaten by a grue.
Finish

As the student user on the workstation machine, use the lab command to complete this exercise. This is important to ensure that resources from previous exercises do not impact upcoming exercises.

Press y when the lab start command prompts you to execute the finish function. Alternatively, execute the following command:

[student@workstation ~]$ lab finish images-lab

---
Chapter 4
Lab: Custom Container Images
Complete the Containerfile for an application that generates a QR code from a given text.

Outcomes

You should be able to:
- Understand multistage builds.
- Run commands within a container.
- Set environment variables.
- Set a working directory.
- Set an entry point.
- Change the user that executes commands.

As the student user on the workstation machine, use the lab command to prepare your system for this exercise.

[student@workstation ~]$ lab start custom-lab
The start command copies a Node.js application, which generates a QR code from a given text, to the labs/custom-lab directory of your workspace. The command also generates an .npmrc file that configures the Node.js application to use an internal NPM registry.

The lab script continuously evaluates the objectives of this lab. Keep the script running in a terminal window and complete the objectives of this lab from a new terminal window.

The application contains a Containerfile that you must complete throughout this exercise. The Containerfile uses a multistage build. The first stage uses the registry.ocp4.example.com:8443/redhattraining/podman-certificate-generator image to generate self-signed certificates.

In the second stage, the application uses the certificates to enable a TLS connection.

Instructions

Navigate to the ~/DO188/labs/custom-lab directory, which contains the application that converts a text into a QR code image. Then, run the app on the host machine by using the npm install and npm start commands. Verify that the application fails gracefully because an environment variable is missing.

Navigate to the ~/DO188/labs/custom-lab directory.

[student@workstation ~]$ cd ~/DO188/labs/custom-lab
no output expected
Install the application dependencies.

[student@workstation custom-lab]$ npm install

added 201 packages, and audited 202 packages in 1s
...output omitted...
Start the application. The application exits because the HTTP port is not set.

[student@workstation custom-lab]$ npm start

> custom-images-lab@1.0.0 start
> node index.js

HTTP PORT not found. Set the env variable to proceed.
In the build stage of the Containerfile, generate the TLS certificates by using the ./gen_certificates.sh command.

The ./gen_certificates.sh command is included in the provided container.

Use the RUN instruction to generate the TLS certificates.

FROM registry.ocp4.example.com:8443/redhattraining/podman-certificate-generator as certs

RUN ./gen_certificates.sh

FROM registry.ocp4.example.com:8443/ubi9/nodejs-18:1
USER root
RUN groupadd -r student && useradd -r -m -g student student && \
    npm config set cache /tmp/.npm --global

COPY --from=certs --chown=student:student /app/*.pem /etc/pki/tls/private/certs/
COPY --chown=student:student . /app/
In the final stage of the Containerfile, set the following environment variables:

TLS_PORT=8443 (the port for TLS traffic)

HTTP_PORT=8080 (the port for HTTP traffic)

CERTS_PATH=/etc/pki/tls/private/certs (the path that contains the TLS certificates)

Build the container image with the name localhost/podman-qr-app.

Use the ENV instruction to add the environment variables to the Containerfile.

FROM registry.ocp4.example.com:8443/redhattraining/podman-certificate-generator as certs

RUN ./gen_certificates.sh

FROM registry.ocp4.example.com:8443/ubi9/nodejs-18:1
USER root
RUN groupadd -r student && useradd -r -m -g student student && \
    npm config set cache /tmp/.npm --global

COPY --from=certs --chown=student:student /app/*.pem /etc/pki/tls/private/certs/
COPY --chown=student:student . /app/

ENV TLS_PORT=8443 \
    HTTP_PORT=8080 \
    CERTS_PATH="/etc/pki/tls/private/certs"
Build the container image.

[student@workstation custom-lab]$ podman build -t localhost/podman-qr-app .
...output omitted...
Successfully tagged localhost/podman-qr-app:latest
201...cc8
In the final stage of the Containerfile, set the working directory of the application to the /app path.

Then, build the container image with the name localhost/podman-qr-app.

Use the WORKDIR instruction to define the working directory.

FROM registry.ocp4.example.com:8443/redhattraining/podman-certificate-generator as certs

RUN ./gen_certificates.sh

FROM registry.ocp4.example.com:8443/ubi9/nodejs-18:1
USER root
RUN groupadd -r student && useradd -r -m -g student student && \
    npm config set cache /tmp/.npm --global

COPY --from=certs --chown=student:student /app/*.pem /etc/pki/tls/private/certs/
COPY --chown=student:student . /app/

ENV TLS_PORT=8443 \
    HTTP_PORT=8080 \
    CERTS_PATH="/etc/pki/tls/private/certs"

WORKDIR /app
Build the container image.

[student@workstation custom-lab]$ podman build -t localhost/podman-qr-app .
...output omitted...
Successfully tagged localhost/podman-qr-app:latest
201...cc8
In the final stage of the Containerfile, set the student user as the user that runs the application. The student user exists in the Containerfile.

Then, build the container image with the name localhost/podman-qr-app.

Use the USER instruction.

FROM registry.ocp4.example.com:8443/redhattraining/podman-certificate-generator as certs

RUN ./gen_certificates.sh

FROM registry.ocp4.example.com:8443/ubi9/nodejs-18:1
USER root
RUN groupadd -r student && useradd -r -m -g student student && \
    npm config set cache /tmp/.npm --global

COPY --from=certs --chown=student:student /app/*.pem /etc/pki/tls/private/certs/
COPY --chown=student:student . /app/

ENV TLS_PORT=8443 \
    HTTP_PORT=8080 \
    CERTS_PATH="/etc/pki/tls/private/certs"

WORKDIR /app

USER student
Build the container image.

[student@workstation custom-lab]$ podman build -t localhost/podman-qr-app .
...output omitted...
Successfully tagged localhost/podman-qr-app:latest
201a...ecc8
In the final stage of the Containerfile, run the npm install --omit=dev command to install the production dependencies of the Node.js application.

Then, build the container image with the name localhost/podman-qr-app.

Use the RUN instruction to execute the command.

FROM registry.ocp4.example.com:8443/redhattraining/podman-certificate-generator as certs

RUN ./gen_certificates.sh

FROM registry.ocp4.example.com:8443/ubi9/nodejs-18:1
USER root
RUN groupadd -r student && useradd -r -m -g student student && \
    npm config set cache /tmp/.npm --global

COPY --from=certs --chown=student:student /app/*.pem /etc/pki/tls/private/certs/
COPY --chown=student:student . /app/

ENV TLS_PORT=8443 \
    HTTP_PORT=8080 \
    CERTS_PATH="/etc/pki/tls/private/certs"

WORKDIR /app

USER student

RUN npm install --omit=dev
Build the container image.

[student@workstation custom-lab]$ podman build -t localhost/podman-qr-app .
...output omitted...
Successfully tagged localhost/podman-qr-app:latest
201...cc8
In the final stage of the Containerfile, make npm start the default command for this image. Additional runtime arguments should not override the default command.

Then, build the container image with the name localhost/podman-qr-app.

Use the ENTRYPOINT instruction to execute the command when the container is started.

FROM registry.ocp4.example.com:8443/redhattraining/podman-certificate-generator as certs

RUN ./gen_certificates.sh

FROM registry.ocp4.example.com:8443/ubi9/nodejs-18:1
USER root
RUN groupadd -r student && useradd -r -m -g student student && \
    npm config set cache /tmp/.npm --global

COPY --from=certs --chown=student:student /app/*.pem /etc/pki/tls/private/certs/
COPY --chown=student:student . /app/

ENV TLS_PORT=8443 \
    HTTP_PORT=8080 \
    CERTS_PATH="/etc/pki/tls/private/certs"

WORKDIR /app

USER student

RUN npm install --omit=dev

ENTRYPOINT npm start
Build the container image.

[student@workstation custom-lab]$ podman build -t localhost/podman-qr-app .
...output omitted...
Successfully tagged localhost/podman-qr-app:latest
201...cc8
Start the podman-qr-app container. Call the container custom-lab and forward ports 8080 and 8443.

Use the podman run command to start the application and bind the corresponding ports.

[student@workstation custom-lab]$ podman run --name=custom-lab \
 -p 8080:8080 -p 8443:8443 podman-qr-app
...output omitted...
TLS Server running on port 8443
Server running on port  8080
Optionally, test the application by navigating to http://localhost:8080 in a web browser.

Finish

As the student user on the workstation machine, use the lab command to complete this exercise. This is important to ensure that resources from previous exercises do not impact upcoming exercises.

Press y when the lab start command prompts you to execute the finish function. Alternatively, execute the following command:

[student@workstation ~]$ lab finish custom-lab

---
Chapter 5
Lab: Persisting Data
Use volumes to provide persistence to an application.

Outcomes
- You should be able to
  - create volumes
  - import data into volumes
  - use volumes in an application

This lab uses a URL shortener application, which consists of three components: a database container, a back-end container, and a front-end container.

The source code for the front end and back end is available at ~/DO188/solutions/persisting-lab after you execute the lab script.

Note the following:

The back-end container uses the following information:

The back end uses default values for the user, password, and database for simplicity.

The back end uses the database container name to resolve the database IP address. Do not change the database container name.

The front-end container uses the following information:

The front end uses an Nginx server to redirect requests from localhost:8080 to the persisting-backend:8080 host. Do not change the back-end container name.

If the front end exits after start, execute podman logs persisting-frontend to check the logs.

The application can become unresponsive after you stop individual containers. If this happens, stop all containers and start the containers in order of database, back end, and front end.

As the student user on the workstation machine, use the lab command to prepare your system for this exercise.

[student@workstation ~]$ lab start persisting-lab
The lab script continuously evaluates the objectives of this lab. Keep the script running in a terminal window and complete the objectives of this lab from a new terminal window.

Instructions

Create a named volume with the following parameters:

The volume is called postgres-vol.

The volume contains the contents of the ~/DO188/labs/persisting-lab/postgres-vol.tar.gz file.

Create the volume.

[student@workstation ~]$ podman volume create postgres-vol
postgres-vol
Import the ~/DO188/labs/persisting-lab/postgres-vol.tar.gz file to the volume:

[student@workstation ~]$ podman volume import postgres-vol \
~/DO188/labs/persisting-lab/postgres-vol.tar.gz
...no output expected...
Start the application database container with the following parameters:

Call the container persisting-db.

Start the container in the background.

Connect the container to the persisting-net network.

Use the following environment variables:

POSTGRESQL_PASSWORD=pass

POSTGRESQL_USER=user

POSTGRESQL_DATABASE=db

Mount the postgres-vol volume to the /var/lib/pgsql/data directory.

Use the registry.ocp4.example.com:8443/rhel9/postgresql-13:1 image.

Create the persisting-net network.

[student@workstation ~]$ podman network create persisting-net
persisting-net
Start the database container.

[student@workstation ~]$ podman run --name persisting-db -d \
 --net persisting-net -e POSTGRESQL_USER=user -e POSTGRESQL_PASSWORD=pass \
 -e POSTGRESQL_DATABASE=db \
 --mount='type=volume,src=postgres-vol,dst=/var/lib/pgsql/data' \
 registry.ocp4.example.com:8443/rhel9/postgresql-13:1
c97f...4a29
Start the back end with the following parameters:

Call the container persisting-backend.

Start the container in the background.

Use the environment variable DB_HOST=persisting-db.

Expose the port 8080 on the machine to route requests to port 8080 inside the container.

Connect the container to the persisting-net network.

Use the registry.ocp4.example.com:8443/redhattraining/podman-urlshortener-backend image.

[student@workstation ~]$ podman run --name persisting-backend -d \
 -e DB_HOST=persisting-db -p 8080:8080 --net persisting-net \
 registry.ocp4.example.com:8443/redhattraining/podman-urlshortener-backend
3a46...4e60
Start the front end with the following parameters:

Call the container persisting-frontend.

Start the container in the background.

Connect the container to the persisting-net network.

Expose the port 3000 on the machine to route requests to port 8080 inside the container.

Use the registry.ocp4.example.com:8443/redhattraining/podman-urlshortener-frontend image.

[student@workstation ~]$ podman run --name persisting-frontend -d \
  --net persisting-net -p 3000:8080 \
  registry.ocp4.example.com:8443/redhattraining/podman-urlshortener-frontend
b10e...940f
Test the application.

In a web browser, verify the functionality of the application at http://localhost:3000.

In a web browser, test the database data import by navigating to http://localhost:8080/api/shorturl/a9yi4rcl5uuzunv.

The a9yi4rcl5uuzunv short URL is a part of the database data that you imported in a previous step into the postgres-vol volume.

Finish

As the student user on the workstation machine, use the lab command to complete this exercise. This is important to ensure that resources from previous exercises do not impact upcoming exercises.

Press y when the lab start command prompts you to execute the finish function. Alternatively, execute the following command:

[student@workstation ~]$ lab finish persisting-lab

---
Chapter 6
Lab: Troubleshooting Containers
Troubleshoot the quotes-api application.

The application consists of the following components:

The quotes-api-v1 service with the v1 quotes API version.

The quotes-api-v2 service with the v2 quotes API version.

The quotes-ui service, which accepts the quotes API version as an environment variable.

The quotes-ui container starts an NGINX proxy that performs the following tasks:

Serves the web application.

Acts as a reverse proxy to route the UI requests to the version specified in the QUOTES_API_VERSION environment variable.

Outcomes

You should be able to:
- Check container logs.
- Run container commands.
- Troubleshoot container networking problems.
- Configure containers by using environment variables.
- Configure containers by overriding container configuration files with host files.

As the student user on the workstation machine, use the lab command to prepare your system for this exercise.

This command deploys the quotes application in a non-working state. You must troubleshoot and fix the application.

[student@workstation ~]$ lab start troubleshooting-lab
The lab script continuously evaluates the objectives of this lab. Keep the script running in a terminal window and complete the objectives of this lab from a new terminal window.

Instructions

Verify that the following containers are running with the following configuration:

quotes-api-v1 and quotes-api-v2
Container image: registry.ocp4.example.com:8443/redhattraining/wiremock

quotes-ui
Port mapping: 3000:8080

Container image: registry.ocp4.example.com:8443/redhattraining/quotes-ui-versioning:1.0

Environment variable: QUOTES_API_VERSION=v2

If any of the containers are missing, then read the container logs to determine what is preventing the container from starting. Then, fix the issue and start the container.

Use the following troubleshooting guide to identify and fix the problems:

Problem: unable to retrieve auth token: invalid username/password: unauthorized
Solution: You must log into the image registry.

Problem: requires at least 1 arg(s), only received 0
Solution: Correct your Podman command.

Problem: nginx: [emerg] host not found in upstream
Solution: Nginx reverse proxy cannot resolve hostname to IP address, probably due to a missing Podman network.
Run the podman ps command with the -a option to show stopped containers.

[student@workstation ~]$ podman ps -a
CONTAINER ID  IMAGE              COMMAND CREATED   STATUS    PORTS NAMES
b72652504844  ...wiremock:latest         28 sec... Up...           quotes-api-v1
a3a2f6809446  ...wiremock:latest         27 sec... Up...           quotes-api-v2
867f6f559629  ...quotes-ui-ve... /bin... 21 sec... Exited... 0...  quotes-ui
The quotes-ui container failed to start.

Read the quotes-ui logs with the podman logs command to look for container start-up errors.

[student@workstation ~]$ podman logs quotes-ui
nginx: [emerg] host not found in upstream "quotes-api-v1" in /etc/nginx/nginx.conf:45
The container fails to start because the NGINX proxy in the quotes-ui container cannot resolve the quotes-api-v1 hostname to an IP address.

Use the podman inspect command to determine the Podman networks that the containers use to communicate.

Inspect the quotes-api-v1 networks.

[student@workstation ~]$ podman inspect \
  quotes-api-v1 --format='{{.NetworkSettings.Networks}}'
map[troubleshooting-lab:0xc000a825a0]
Inspect the quotes-api-v2 networks.

[student@workstation ~]$ podman inspect \
  quotes-api-v2 --format='{{.NetworkSettings.Networks}}'
map[troubleshooting-lab:0xc000a825a0]
Repeat the command for the quotes-ui container.

[student@workstation ~]$ podman inspect \
  quotes-ui --format='{{.NetworkSettings.Networks}}'
map[]
The quotes-ui container is missing the troubleshooting-lab network and thus it cannot resolve the quotes-api-v1 and quotes-api-v2 host names.

Remove the current quotes-ui container.

[student@workstation ~]$ podman rm quotes-ui
093a...cf4a
Recreate the quotes-ui container and attach it to the troubleshooting-lab network.

[student@workstation ~]$ podman run -d \
  --name quotes-ui -p 3000:8080 \
  -e QUOTES_API_VERSION=v2 \
  --net troubleshooting-lab \
  registry.ocp4.example.com:8443/redhattraining/quotes-ui-versioning:1.0
d838...7432
Verify that the quotes-ui container starts.

[student@workstation ~]$ podman ps
CONTAINER ID  IMAGE              COMMAND CREATED     STATUS  PORTS NAMES
b72652504844  ...wiremock:latest          28 sec...  Up...         quotes-api-v1
a3a2f6809446  ...wiremock:latest          27 sec...  Up...         quotes-api-v2
6e8581a9d73b  ...quotes-ui-versioning:1.0 1 sec...   Up...         quotes-ui
Ensure that the NGINX reverse proxy can route requests to both versions of the quotes API.

The NGINX reverse proxy in the quotes-ui container should route requests as indicated in the following table:

Table 6.1. NGINX mappings

From	To
http://localhost:8080/api/v1/quotes	http://quotes-api-v1:8080/api/v1/quotes
http://localhost:8080/api/v2/quotes	http://quotes-api-v2:8081/api/v2/quotes

The quotes-ui logs provide some network information that you might need.

Perform any configuration modifications in the quotes-ui container.

Use a bind mount to replace the /etc/nginx/nginx.conf file in the quotes-ui container with a modified ~/DO188/labs/troubleshooting-lab/nginx.conf file, if necessary.

Use the podman exec command to run the curl command from the quotes-ui container to test the v1 and v2 mappings. Use the localhost host name to test the NGINX mappings. Use the silent option (-s) with the curl command to print the output only.

Test that the v1 mapping works.

[student@workstation ~]$ podman exec quotes-ui \
  curl -s http://localhost:8080/api/v1/quotes
[
  {
      "id": 1,
      "quote": "I live my daydreams in music.",
      "author": "Albert Einstein"
  },
...output omitted...
Test that the v2 mapping does not work.

[student@workstation ~]$ podman exec quotes-ui \
  curl -s http://localhost:8080/api/v2/quotes
<html>
<head><title>502 Bad Gateway</title></head>
<body>
<center><h1>502 Bad Gateway</h1></center>
<hr><center>nginx/1.20.1</center>
</body>
</html>
This error means that NGINX was able to map the request but did not get a response from the quotes-api-v2 service.

Investigate if the quotes-api-v2 service is using a different port. Run the podman logs command on the quotes-api-v2 container to find the port that the service is using.

[student@workstation ~]$ podman logs quotes-api-v2
...output omitted...
port:                         8081
...output omitted...
The quotes-api-v2 service is using the 8081 port.

Read the quotes-ui container NGINX configuration file at the /etc/nginx/nginx.conf path.

[student@workstation ~]$ podman exec quotes-ui \
  cat /etc/nginx/nginx.conf
...output omitted...
    location /api/v2 {
        rewrite /api/v2/(.*) /$1 break;
        proxy_pass http://quotes-api-v2:8080;
    }
...output omitted...
The mapping for v2 is redirecting requests to the http://quotes-api-v2:8080 address, which points to the wrong port.

Read the updated copy of the NGINX configuration at ~/DO188/labs/troubleshooting-lab/nginx.conf.

[student@workstation ~]$ cat ~/DO188/labs/troubleshooting-lab/nginx.conf
...output omitted...
    location /api/v2 {
        rewrite /api/v2/(.*) /$1 break;
        proxy_pass http://quotes-api-v2:8081;
    }
...output omitted...
This version points to the right 8081 port.

Remove the quotes-ui container by running podman rm using the -f option.

[student@workstation ~]$ podman rm -f quotes-ui
d838...7432
Recreate the quotes-ui container. Override the container's /etc/nginx/nginx.conf file with the ~/DO188/labs/troubleshooting-lab/nginx.conf file by using a bind mount with the :Z option.

[student@workstation ~]$ podman run -d \
  --name quotes-ui \
  -p 3000:8080 \
  -e QUOTES_API_VERSION=v2 \
  --net troubleshooting-lab \
  -v ~/DO188/labs/troubleshooting-lab/nginx.conf:/etc/nginx/nginx.conf:Z \
  registry.ocp4.example.com:8443/redhattraining/quotes-ui-versioning:1.0
a0d1...a73f
Confirm that the application is accessible by using a web browser to navigate to http://localhost:3000.


Finish

As the student user on the workstation machine, use the lab command to complete this exercise. This is important to ensure that resources from previous exercises do not impact upcoming exercises.

Press y when the lab start command prompts you to execute the finish function. Alternatively, execute the following command:

[student@workstation ~]$ lab finish troubleshooting-lab

--- Chapter 7
Lab: Multi-container Applications with Compose
Create a compose file to deploy your application in a testing environment. The application uses three components: a UI, a back end, and an external service that the back end uses. Because the development team does not own the external service, they decided to use a mock server called Wiremock to mock the external service interactions with the back end.

Outcomes

You should be able to:

Create a multi-container compose file with the following features:

Bind mounts

Environment variables

Networks

Published ports

Reload the compose file after modifying it.

As the student user on the workstation machine, use the lab command to prepare your system for this exercise.

[student@workstation ~]$ lab start compose-lab
The start function copies a file called compose.yaml that you must complete throughout this exercise. It also copies the configuration for wiremock to mock the quotes-provider service.

The lab script continuously evaluates the objectives of this lab. Keep the script running in a terminal window and complete the objectives of this lab from a new terminal window.

Instructions

Change into the ~/DO188/labs/compose-lab directory. This directory contains the compose file called compose.yaml, which you must complete. Then, start the containers in the background.

Container Name	Image
quotes-provider	registry.ocp4.example.com:8443/redhattraining/wiremock
quotes-api	registry.ocp4.example.com:8443/redhattraining/podman-quotesapi-compose
quotes-ui	registry.ocp4.example.com:8443/redhattraining/podman-quotes-ui
Note
The WireMock container image provides the ability to create a fake API service. This exercise uses this image to run the quotes-provider API. In a real-world scenario, your API image is built from your application source code.

Change into the ~/DO188/labs/compose-lab directory.

[student@workstation compose-lab]$ cd ~/DO188/labs/compose-lab
no output expected
Update the compose.yaml file to look like the following code block:

services:
  wiremock:
    container_name: "quotes-provider"
    image: "registry.ocp4.example.com:8443/redhattraining/wiremock"
  quotes-api:
    container_name: "quotes-api"
    image: "registry.ocp4.example.com:8443/redhattraining/podman-quotesapi-compose"
  quotes-ui:
    container_name: "quotes-ui"
    image: "registry.ocp4.example.com:8443/redhattraining/podman-quotes-ui"
From the directory that contains the compose.yaml file, run podman-compose up to create the containers. Use the -d option to run the containers in the background.

[student@workstation compose-lab]$ podman-compose up -d
['podman', '--version', '']
using podman version: ...
** excluding:  set()
...output omitted...
Configure the quotes-provider mock service by providing the Wiremock mappings and responses in the ~/DO188/labs/compose-lab/wiremock/stubs directory.

Wiremock expects two directories to configure the mock server:

mappings: contains files that define the HTTP endpoints.

__files: contains files with fixed responses.

To provide the Wiremock configuration, mount the ~/DO188/labs/compose-lab/wiremock/stubs directory as the /home/wiremock directory in the container.

To apply the changes, delete and restart the containers by using the podman-compose command.

Use a bind mount to map ~/DO188/labs/compose-lab/wiremock/stubs to the /home/wiremock directory. Provide the Z option to add the correct SELinux permissions.

services:
  wiremock:
    container_name: "quotes-provider"
    image: "registry.ocp4.example.com:8443/redhattraining/wiremock"
    volumes:
      - ~/DO188/labs/compose-lab/wiremock/stubs:/home/wiremock:Z
  quotes-api:
    container_name: "quotes-api"
    image: "registry.ocp4.example.com:8443/redhattraining/podman-quotesapi-compose"
  quotes-ui:
    container_name: "quotes-ui"
    image: "registry.ocp4.example.com:8443/redhattraining/podman-quotes-ui"
Apply the changes by running the podman-compose down command followed by podman-compose up -d.

Run podman-compose down to stop and remove the containers in the compose.yaml file.

[student@workstation compose-lab]$ podman-compose down
['podman', '--version', '']
using podman version: ...
** excluding:  set()
podman stop -t 10 quotes-ui
quotes-ui
exit code: 0
podman stop -t 10 quotes-api
quotes-api
exit code: 0
podman stop -t 10 quotes-provider
quotes-provider
exit code: 0
podman rm quotes-ui
ff3d...093e
exit code: 0
podman rm quotes-api
2a5d...5be3
exit code: 0
podman rm quotes-provider
48c9...c2f8
exit code: 0
Run podman-compose up to re-create the containers with the new changes.

[student@workstation compose-lab]$ podman-compose up -d
['podman', '--version', '']
using podman version: ...
** excluding:  set()
...output omitted...
Expose the quotes-api service to the host machine on port 8080. The quotes-api service listens on port 8080 in the container.

To apply the changes, delete and restart the containers by using the podman-compose command.

Use the ports property to expose the port 8080 in the container to port 8080 on the host.

services:
  wiremock:
    container_name: "quotes-provider"
    image: "registry.ocp4.example.com:8443/redhattraining/wiremock"
    volumes:
      - ~/DO188/labs/compose-lab/wiremock/stubs:/home/wiremock:Z
  quotes-api:
    container_name: "quotes-api"
    image: "registry.ocp4.example.com:8443/redhattraining/podman-quotesapi-compose"
    ports:
      - "8080:8080"
  quotes-ui:
    container_name: "quotes-ui"
    image: "registry.ocp4.example.com:8443/redhattraining/podman-quotes-ui"
Apply the changes by running the podman-compose down command followed by podman-compose up -d.

Run podman-compose down to stop and remove the containers in the compose.yaml file.

[student@workstation compose-lab]$ podman-compose down
...output omitted...
Run podman-compose up to re-create the containers with the new changes.

[student@workstation compose-lab]$ podman-compose up -d
...output omitted...
Isolate together the quotes-provider and quotes-api services by creating a Podman network called lab-net in the compose.yaml file.

To apply the changes, delete and restart the containers by using the podman-compose command.

Use the networks top-level property to create the lab-net network from the compose.yaml file. Then use the networks property under the wiremock and quotes-api services to connect both containers to the lab-net network.

services:
  wiremock:
    container_name: "quotes-provider"
    image: "registry.ocp4.example.com:8443/redhattraining/wiremock"
    volumes:
      - ~/DO188/labs/compose-lab/wiremock/stubs:/home/wiremock:Z
    networks:
      - lab-net
  quotes-api:
    container_name: "quotes-api"
    image: "registry.ocp4.example.com:8443/redhattraining/podman-quotesapi-compose"
    ports:
      - "8080:8080"
    networks:
      - lab-net
  quotes-ui:
    container_name: "quotes-ui"
    image: "registry.ocp4.example.com:8443/redhattraining/podman-quotes-ui"

networks:
  lab-net: {}
Apply the changes by running the podman-compose down command followed by the podman-compose up -d command.

Run the podman-compose down command to stop and remove the containers in the compose.yaml file.

[student@workstation compose-lab]$ podman-compose down
...output omitted...
Run the podman-compose up command to re-create the containers with the new changes.

[student@workstation compose-lab]$ podman-compose up -d
...output omitted...
The quotes-api and quotes-provider services share a network, but the quotes-api service is missing the hostname configuration of the provider endpoint. Set the QUOTES_SERVICE environment variable to configure the quotes-provider URL. Use the default name resolution, the quotes-provider configuration, the http protocol, and the port 8080 to configure this value.

To apply the changes, delete and restart the containers by using the podman-compose command.

Add the QUOTES_SERVICE="http://quotes-provider:8080" environment variable to the compose.yaml file.

services:
  wiremock:
    container_name: "quotes-provider"
    image: "registry.ocp4.example.com:8443/redhattraining/wiremock"
    volumes:
      - ~/DO188/labs/compose-lab/wiremock/stubs:/home/wiremock:Z
    networks:
      - lab-net
  quotes-api:
    container_name: "quotes-api"
    image: "registry.ocp4.example.com:8443/redhattraining/podman-quotesapi-compose"
    ports:
      - "8080:8080"
    networks:
      - lab-net
    environment:
      QUOTES_SERVICE: "http://quotes-provider:8080"
  quotes-ui:
    container_name: "quotes-ui"
    image: "registry.ocp4.example.com:8443/redhattraining/podman-quotes-ui"

networks:
  lab-net: {}
Apply the changes by running the podman-compose down command followed by the podman-compose up -d command.

Run the podman-compose down command to stop and remove the containers in the compose.yaml file.

[student@workstation compose-lab]$ podman-compose down
...output omitted...
Run the podman-compose up command to re-create the containers with the new changes.

[student@workstation compose-lab]$ podman-compose up -d
...output omitted...
Expose the quotes-ui service on port 3000 so that the host can access the application on http://localhost:3000. The quotes-ui is listening on port 8080 in the UI container.

To apply the changes, delete and restart the containers by using the podman-compose command.

Use the previous URL to visit the quotes application by using a web browser.

Use the ports property in the quotes-ui service to expose the port 8080 in the container to port 3000 on the host.

services:
  wiremock:
    container_name: "quotes-provider"
    image: "registry.ocp4.example.com:8443/redhattraining/wiremock"
    volumes:
      - ~/DO188/labs/compose-lab/wiremock/stubs:/home/wiremock:Z
    networks:
      - lab-net
  quotes-api:
    container_name: "quotes-api"
    image: "registry.ocp4.example.com:8443/redhattraining/podman-quotesapi-compose"
    ports:
      - "8080:8080"
    networks:
      - lab-net
    environment:
      QUOTES_SERVICE: "http://quotes-provider:8080"
  quotes-ui:
    container_name: "quotes-ui"
    image: "registry.ocp4.example.com:8443/redhattraining/podman-quotes-ui"
    ports:
      - "3000:8080"

networks:
  lab-net: {}
Apply the changes by running the podman-compose down command followed by the podman-compose up -d command.

Run the podman-compose down command to stop and remove the containers in the compose.yaml file.

[student@workstation compose-lab]$ podman-compose down
...output omitted...
Run the podman-compose up command to re-create the containers with the new changes.

[student@workstation compose-lab]$ podman-compose up -d
...output omitted...
Navigate to http://localhost:3000 to verify that the quotes application shows famous quotes in the browser.

Finish

As the student user on the workstation machine, use the lab command to complete this exercise. This step is important to ensure that resources from previous exercises do not impact upcoming exercises.

Press y when the lab start command prompts you to execute the finish function. Alternatively, execute the following command:

[student@workstation ~]$ lab finish compose-lab


--- Chapter 8
Lab: Container Orchestration with Kubernetes and OpenShift
Debug and deploy a multi-container application to the Red Hat OpenShift Container Platform (RHOCP).

Outcomes

You should be able to:

Verify and correct the configuration of the Service and Deployment RHOCP objects.

Deploy RHOCP objects.

In this exercise, your task is to deploy the quotes application to RHOCP.

The quotes application uses the quotes-api and quotes-ui containerized microservices.

Your colleague managed to deploy the first tier of the application, the quotes-ui container, to RHOCP. However, the pod crashes and does not respond to requests. Additionally, the colleague faces difficulties when trying to deploy the quotes-api container to RHOCP. You, the RHOCP expert in the company, are tasked with helping your colleague.

As the student user on the workstation machine, use the lab command to:

Create the ocp-lab project.

Deploy the quotes-ui microservice.

[student@workstation ~]$ lab start openshift-lab
The lab script continuously evaluates the objectives of this lab. Keep the script running in a terminal window and complete the objectives of this lab from a new terminal window.

Instructions

Log in to the cluster as the developer user, and ensure that you use the ocp-lab project.

Log in to the cluster as the developer user.

[student@workstation ~]$ oc login -u developer -p developer \
https://api.ocp4.example.com:6443
Login successful.

...output omitted...
Ensure that you use the ocp-lab project.

[student@workstation ~]$ oc project ocp-lab
Already on project "ocp-lab" on server "https://api.ocp4.example.com:6443".
Change into the ~/DO188/labs/openshift-lab/ directory.

This directory contains the quotes-api YAML files that your colleague created. Be aware that the YAML files might contain mistakes.

[student@workstation ~]$ cd ~/DO188/labs/openshift-lab/
Use the deployment.yaml file to deploy the quotes-api container in the ocp-lab RHOCP project.

Try to create the deployment by using the deployment.yaml file.

[student@workstation openshift-lab]$ oc create -f deployment.yaml
The Deployment "quotes-api" is invalid: spec.template.metadata.labels: Invalid value: map[string]string{"app":"quotes-api"}: `selector` does not match template `labels`
The deployment defines an application pod with the app=quotes-api label. However, the spec.selector.matchLabels field uses a different label.

Open the deployment.yaml file in a text editor, such as gedit, and modify the spec.selector.matchLabels field to use the same label as the spec.template.metadata.labels field.

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: quotes-api
  name: quotes-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: quotes-api
  template:
    metadata:
      labels:
        app: quotes-api
    spec:
      containers:
      - image: registry.ocp4.example.com:8443/redhattraining/podman-quotes-api:openshift
        name: podman-quotes-api
Create the deployment by using the deployment.yaml file.

[student@workstation openshift-lab]$ oc create -f deployment.yaml
Warning: would violate PodSecurity ...output omitted...
deployment.apps/quotes-api created
Note
You can ignore pod security warnings for exercises in this course. Red Hat OpenShift uses the Security Context Constraints controller to provide safe defaults for pod security.

Verify that the quotes-api application pod is in the RUNNING state.

[student@workstation openshift-lab]$ oc get po
NAME                          READY   STATUS             RESTARTS        AGE
quotes-api-6c9f758574-nk8kd   1/1     Running            0               5s
quotes-ui-d7d457674-mljrb     0/1     CrashLoopBackOff   15 (3m9s ago)   55m
If the application pod is in the ContainerCreating state, then execute the previous command again after a few seconds.

Use the service.yaml file to configure the quotes-ui container networking in the ocp-lab project.

Configure the service.yaml file to conform to the following requirements:

The quotes-ui container must reach the quotes-api container at the http://quotes-api:8080 URL.

The quotes-api container listens on port 8080 by default.

Deploy the quotes-ui container after the quotes-api container becomes available on the quotes-api host. The application architect advised you to restart the quotes-ui application if it is deployed in the incorrect order.

Note
If you make a mistake, delete and recreate the Service object.

For example, you can use the oc delete -f service.yaml command to delete the Service object.

Open the service.yaml file in a text editor, such as gedit. Then, configure the service to serve on port 8080.

...file omitted...
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 3000
  selector:
    app: quotes
Configure the service to send requests to port 8080.

...file omitted...
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: quotes
Configure the service to send requests to pods with the quotes-api label.

...file omitted...
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: quotes-api
Configure the service to be available on the quotes-api hostname.

apiVersion: v1
kind: Service
metadata:
  labels:
    app: quotes
  name: quotes-api
...file omitted...
Create the service by using the service.yaml file.

[student@workstation openshift-lab]$ oc create -f service.yaml
service/quotes-api created
Verify the service configuration.

The endpoint IP address might differ in your output.

[student@workstation openshift-lab]$ oc describe service quotes-api
Name:              quotes-api
Namespace:         ocp-lab
Labels:            app=quotes
Annotations:       <none>
Selector:          app=quotes-api
...output omitted...
Port:              <unset>  8080/TCP
TargetPort:        8080/TCP
Endpoints:         10.8.0.102:8080
...output omitted...
If your output differs from the highlighted output of the previous command, return to the previous steps and ensure you configured your service correctly.

Verify that the quotes-ui container is still failing.

[student@workstation openshift-lab]$ oc get po
NAME                          READY   STATUS             RESTARTS        AGE
quotes-api-6c9f758574-nk8kd   1/1     Running            0               20m
quotes-ui-d7d457674-mljrb     0/1     CrashLoopBackOff   15 (3m9s ago)   55m
Restart the quotes-ui container.

You can delete containers that contain the app=quotes-ui label, and let the quotes-ui deployment recreate the container.

[student@workstation openshift-lab]$ oc delete pod -l app=quotes-ui
pod "quotes-ui-d7d457674-9cw7l" deleted
Then, verify that the quotes-ui deployment created a new container.

[student@workstation openshift-lab]$ oc get po
NAME                          READY   STATUS    RESTARTS   AGE
quotes-api-6c9f758574-nk8kd   1/1     Running   0          39m
quotes-ui-d7d457674-rbkl7     1/1     Running   0          67s
In a web browser, navigate to http://quotes-ui-ocp-lab.apps.ocp4.example.com and verify that the application works.


Finish

As the student user on the workstation machine, use the lab command to complete this exercise. This is important to ensure that resources from previous exercises do not impact upcoming exercises.

[student@workstation ~]$ lab finish openshift-lab
